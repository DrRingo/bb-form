;; File: core.clj
(ns form.core
  (:require [babashka.process :refer [shell]]
            [clojure.string :as str]
            [cheshire.core :as json]))

;; Atom ƒë·ªÉ l∆∞u tr·ªØ t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi c·ªßa form
(def answers (atom {}))

;; -------------------------------
;; Utility functions
;; -------------------------------

;; Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh chu·ªói
;; Tham s·ªë: v - gi√° tr·ªã c·∫ßn chuy·ªÉn ƒë·ªïi (c√≥ th·ªÉ l√† keyword, symbol ho·∫∑c gi√° tr·ªã kh√°c)
;; Tr·∫£ v·ªÅ: chu·ªói ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi
(defn normalize-str [v]
  (cond
    (keyword? v) (name v)
    (symbol? v)  (name v)
    :else (str v)))

;; Chu·∫©n h√≥a key cho branching logic
;; Tham s·ªë: v - gi√° tr·ªã c·∫ßn chu·∫©n h√≥a
;; Tr·∫£ v·ªÅ: chu·ªói ƒë√£ ƒë∆∞·ª£c trim, chuy·ªÉn th√†nh lowercase
(defn normalize-branch-key [v]
  (-> v normalize-str str/trim str/lower-case))

;; Ki·ªÉm tra xem field c√≥ n√™n b·ªè qua kh√¥ng (ƒë√£ c√≥ gi√° tr·ªã prefilled)
;; Tham s·ªë: id - id c·ªßa field c·∫ßn ki·ªÉm tra, path - ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: true n·∫øu field ƒë√£ c√≥ gi√° tr·ªã, false n·∫øu ch∆∞a
(defn should-skip? [id path]
  (let [field-path (conj path (keyword id))
        v (get-in @answers field-path)]
    ;; (println "DEBUG should-skip? id:" id "path:" path "field-path:" field-path "value:" v)
    (or (and (map? v) (contains? v :_value))
        (and (not (map? v)) (some? v)))))

;; L·∫•y gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn s·∫µn cho field
;; Tham s·ªë: id - id c·ªßa field c·∫ßn l·∫•y gi√° tr·ªã, path - ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn s·∫µn ho·∫∑c nil n·∫øu kh√¥ng c√≥
(defn get-prefilled [id path]
  (let [field-path (conj path (keyword id))
        v (get-in @answers field-path)]
    ;; (println "DEBUG get-prefilled id:" id "path:" path "field-path:" field-path "value:" v)
    (if (map? v)
      (:_value v)
      v)))

;; Parse gi√° tr·ªã theo ki·ªÉu d·ªØ li·ªáu
;; Tham s·ªë: v - gi√° tr·ªã c·∫ßn parse, type - ki·ªÉu d·ªØ li·ªáu ("number", "text", "date")
;; Tr·∫£ v·ªÅ: gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c parse theo ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
(defn parse-value [v type]
  (case type
    "number" (try (Integer/parseInt (str v)) (catch Exception _ v))
    "text"   (str v)
    "date"   (str v)
    v))

;; Helper √©p ki·ªÉu v·ªÅ map n·∫øu kh√¥ng ph·∫£i map
(defn force-map [v]
  (cond
    (map? v) v
    (string? v) {:_value v}
    (number? v) {:_value v}
    (nil? v) {}
    :else {}))

;; -------------------------------
;; GUM UI
;; -------------------------------

;; Hi·ªÉn th·ªã input text v·ªõi GUM
;; Tham s·ªë: label - nh√£n hi·ªÉn th·ªã cho input
;; Tr·∫£ v·ªÅ: chu·ªói ng∆∞·ªùi d√πng nh·∫≠p v√†o
(defn gum-input [label]
  (-> (shell {:out :string} "gum" "input" "--placeholder" label)
      :out str/trim))

;; Hi·ªÉn th·ªã dropdown select v·ªõi GUM
;; Tham s·ªë: label - nh√£n hi·ªÉn th·ªã, options - danh s√°ch c√°c l·ª±a ch·ªçn
;; Tr·∫£ v·ªÅ: l·ª±a ch·ªçn ƒë∆∞·ª£c ch·ªçn (m·ªôt chu·ªói)
(defn gum-select [label options]
  (-> (apply shell {:out :string}
             (concat ["gum" "choose" "--header" label] options))
      :out str/trim))

;; Hi·ªÉn th·ªã multiselect v·ªõi GUM
;; Tham s·ªë: label - nh√£n hi·ªÉn th·ªã, options - danh s√°ch c√°c l·ª±a ch·ªçn
;; Tr·∫£ v·ªÅ: danh s√°ch c√°c l·ª±a ch·ªçn ƒë∆∞·ª£c ch·ªçn (vector)
(defn gum-multiselect [label options]
  (-> (apply shell {:out :string}
             (concat ["gum" "choose" "--no-limit" "--header" label] options))
      :out str/split-lines))

;; -------------------------------
;; Field handling
;; -------------------------------

;; Multimethod ƒë·ªÉ x·ª≠ l√Ω c√°c lo·∫°i field kh√°c nhau
;; Tham s·ªë: field - th√¥ng tin field, path - ƒë∆∞·ªùng d·∫´n trong c·∫•u tr√∫c d·ªØ li·ªáu
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t atom answers)
(defmulti ask-field (fn [field & _] (keyword (:type field))))

;; X·ª≠ l√Ω branching logic - hi·ªÉn th·ªã field con d·ª±a tr√™n l·ª±a ch·ªçn
;; Tham s·ªë: branch - map ch·ª©a c√°c nh√°nh, value - gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn, path - ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - g·ªçi ask-field cho c√°c field con)
(defn handle-branch [branch value path]
  (let [raw-key (str/trim (str value))
        norm-key (normalize-branch-key value)
        norm-branch (into {} (map (fn [[k v]] [(normalize-branch-key k) v]) branch))]
    (when-let [subfields (get norm-branch norm-key)]
      (doseq [sub subfields]
        (let [field-id (last path)
              branch-key (keyword (str (name field-id) "_branch"))
              branch-path (conj (pop path) branch-key (keyword raw-key))]
          (ask-field sub branch-path))))))

;; X·ª≠ l√Ω field ki·ªÉu text
;; Tham s·ªë: field - th√¥ng tin field (id, label, required, branch), path - ƒë∆∞·ªùng d·∫´n
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t answers v√† x·ª≠ l√Ω branch)
(defmethod ask-field :text [{:keys [id label required branch]} path]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (gum-input label))]
    (when (or (not required) (not (str/blank? (str value))))
      (swap! answers update-in path #(assoc (force-map %) id-k (parse-value value "text"))))
    (handle-branch branch value (conj path id-k))))

;; X·ª≠ l√Ω field ki·ªÉu number v·ªõi validation
;; Tham s·ªë: field - th√¥ng tin field (id, label, required, branch), path - ƒë∆∞·ªùng d·∫´n
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t answers v√† x·ª≠ l√Ω branch)
(defmethod ask-field :number [{:keys [id label required branch]} path]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (loop []
                  (let [v (gum-input label)]
                    (if (or (not required)
                            (try (Integer/parseInt v) true (catch Exception _ false)))
                      v
                      (do (println "‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n!") (recur))))))]
    (swap! answers update-in path #(assoc (force-map %) id-k (parse-value value "number")))
    (handle-branch branch value (conj path id-k))))

;; X·ª≠ l√Ω field ki·ªÉu date
;; Tham s·ªë: field - th√¥ng tin field (id, label, required, branch), path - ƒë∆∞·ªùng d·∫´n
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t answers v√† x·ª≠ l√Ω branch)
(defmethod ask-field :date [{:keys [id label required branch]} path]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (gum-input (str label " (YYYY-MM-DD)")))]
    (when (or (not required) (not (str/blank? value)))
      (swap! answers update-in path #(assoc (force-map %) id-k (parse-value value "date"))))
    (handle-branch branch value (conj path id-k))))

;; X·ª≠ l√Ω field ki·ªÉu select (dropdown m·ªôt l·ª±a ch·ªçn)
;; Tham s·ªë: field - th√¥ng tin field (id, label, options, branch), path - ƒë∆∞·ªùng d·∫´n
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t answers v√† x·ª≠ l√Ω branch)
(defmethod ask-field :select [{:keys [id label options branch]} path]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (gum-select label options))]
    (swap! answers update-in path #(assoc (force-map %) id-k value))
    (handle-branch branch value (conj path id-k))))

;; X·ª≠ l√Ω field ki·ªÉu multiselect (ch·ªçn nhi·ªÅu l·ª±a ch·ªçn)
;; Tham s·ªë: field - th√¥ng tin field (id, label, options, branch), path - ƒë∆∞·ªùng d·∫´n
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t answers v√† x·ª≠ l√Ω branch cho t·ª´ng l·ª±a ch·ªçn)
(defmethod ask-field :multiselect [{:keys [id label options branch]} path]
  (let [id-k (keyword id)
        raw (if (should-skip? id path)
              (get-prefilled id path)
              (gum-multiselect label options))
        choices (cond
                  (string? raw) [raw]
                  (sequential? raw) raw
                  :else [])]
    (swap! answers update-in path #(assoc (force-map %) id-k choices))
    (doseq [choice choices]
      (handle-branch branch choice (conj path id-k)))))

;; -------------------------------
;; Entry point
;; -------------------------------

;; H√†m ch√≠nh ƒë·ªÉ ch·∫°y form
;; Tham s·ªë: form - c·∫•u tr√∫c form ch·ª©a title, description v√† fields
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - hi·ªÉn th·ªã form)
(defn run-form [form]
  (println "\nüìù" (:title form))
  (println (:description form) "\n")
  (doseq [field (:fields form)]
    (ask-field field [:selectedByUser]))
  ;; Vi·ªác l∆∞u file ƒë∆∞·ª£c x·ª≠ l√Ω trong run-form.clj
  )


