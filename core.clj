;; File: core.clj
(ns form.core
  (:require [babashka.process :refer [shell]]
            [clojure.string :as str]
            [cheshire.core :as json]))

;; Atom ƒë·ªÉ l∆∞u tr·ªØ t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi c·ªßa form
(def answers (atom {}))
;; Atom cho d√≤ng tr·∫°ng th√°i/th√¥ng b√°o l·ªói
(def status-line (atom ""))

;; H√†m c·∫≠p nh·∫≠t status-line
(defn set-status! [msg]
  (reset! status-line msg))

;; H√†m x√≥a status-line
(defn clear-status! []
  (reset! status-line ""))

;; H√†m clear m√†n h√¨nh
(defn clear-screen []
  (print "\033[2J")  ;; Clear to√†n b·ªô m√†n h√¨nh
  (print "\033[H"))  ;; Di chuy·ªÉn con tr·ªè v·ªÅ ƒë·∫ßu

;; H√†m render header (title, description, status-line)
(defn render-header [form]
  (println "\nüìù" (:title form))
  (println (:description form) "\n")
  (println (str ":::: " @status-line)))

;; H√†m hi·ªÉn th·ªã th√¥ng b√°o l·ªói v·ªõi GUM
(defn show-error [message]
  (shell {:out :string} "gum" "style" "--foreground" "#ff0000" "--border" "normal" "--border-foreground" "#ff0000" "--margin" "1" "--padding" "1" message))

;; H√†m in status-line (lu√¥n in sau ti√™u ƒë·ªÅ/m√¥ t·∫£)
(defn print-status []
  (when (not (str/blank? @status-line))
    (show-error @status-line)))

;; H√†m clear d√≤ng status c≈©
(defn clear-status-line []
  (print "\033[2K")  ;; X√≥a d√≤ng hi·ªán t·∫°i
  (print "\033[1A")  ;; Di chuy·ªÉn l√™n 1 d√≤ng
  (print "\033[2K")) ;; X√≥a d√≤ng ƒë√≥

;; H√†m in l·∫°i status-line (sau khi ƒë√£ clear)
(defn reprint-status []
  (when (not (str/blank? @status-line))
    (show-error @status-line)))

;; -------------------------------
;; Utility functions
;; -------------------------------

;; Chuy·ªÉn ƒë·ªïi gi√° tr·ªã th√†nh chu·ªói
;; Tham s·ªë: v - gi√° tr·ªã c·∫ßn chuy·ªÉn ƒë·ªïi (c√≥ th·ªÉ l√† keyword, symbol ho·∫∑c gi√° tr·ªã kh√°c)
;; Tr·∫£ v·ªÅ: chu·ªói ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi
(defn normalize-str [v]
  (cond
    (keyword? v) (name v)
    (symbol? v)  (name v)
    :else (str v)))

;; Chu·∫©n h√≥a key cho branching logic
;; Tham s·ªë: v - gi√° tr·ªã c·∫ßn chu·∫©n h√≥a
;; Tr·∫£ v·ªÅ: chu·ªói ƒë√£ ƒë∆∞·ª£c trim, chuy·ªÉn th√†nh lowercase
(defn normalize-branch-key [v]
  (-> v normalize-str str/trim str/lower-case))

;; Ki·ªÉm tra xem field c√≥ n√™n b·ªè qua kh√¥ng (ƒë√£ c√≥ gi√° tr·ªã prefilled)
;; Tham s·ªë: id - id c·ªßa field c·∫ßn ki·ªÉm tra, path - ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: true n·∫øu field ƒë√£ c√≥ gi√° tr·ªã, false n·∫øu ch∆∞a
(defn should-skip? [id path]
  (let [field-path (conj path (keyword id))
        v (get-in @answers field-path)]
    ;; (println "DEBUG should-skip? id:" id "path:" path "field-path:" field-path "value:" v)
    (or (and (map? v) (contains? v :_value))
        (and (not (map? v)) (some? v)))))

;; L·∫•y gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn s·∫µn cho field
;; Tham s·ªë: id - id c·ªßa field c·∫ßn l·∫•y gi√° tr·ªã, path - ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn s·∫µn ho·∫∑c nil n·∫øu kh√¥ng c√≥
(defn get-prefilled [id path]
  (let [field-path (conj path (keyword id))
        v (get-in @answers field-path)]
    ;; (println "DEBUG get-prefilled id:" id "path:" path "field-path:" field-path "value:" v)
    (if (map? v)
      (:_value v)
      v)))

;; Parse gi√° tr·ªã theo ki·ªÉu d·ªØ li·ªáu
;; Tham s·ªë: v - gi√° tr·ªã c·∫ßn parse, type - ki·ªÉu d·ªØ li·ªáu ("number", "text", "date")
;; Tr·∫£ v·ªÅ: gi√° tr·ªã ƒë√£ ƒë∆∞·ª£c parse theo ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
(defn parse-value [v type]
  (case type
    "number" (try (Integer/parseInt (str v)) (catch Exception _ v))
    "text"   (str v)
    "date"   (let [s (str v)]
                 (if (re-matches #"^\d{2}-\d{2}-\d{4}$" s)
                   (try
                     (let [dt (java.time.LocalDate/parse s (java.time.format.DateTimeFormatter/ofPattern "dd-MM-yyyy"))]
                       (.format dt (java.time.format.DateTimeFormatter/ofPattern "yyyy-MM-dd")))
                     (catch Exception _ s))
                   s))
    v))

;; L·∫•y ng√†y h√¥m nay theo ƒë·ªãnh d·∫°ng DD-MM-YYYY
;; Tr·∫£ v·ªÅ: chu·ªói ng√†y h√¥m nay
(defn today []
  (let [now (java.time.LocalDate/now)]
    (.format now (java.time.format.DateTimeFormatter/ofPattern "dd-MM-yyyy"))))

;; L·∫•y th√°ng v√† nƒÉm hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: map v·ªõi :month v√† :year
(defn current-month-year []
  (let [now (java.time.LocalDate/now)]
    {:month (.getMonthValue now)
     :year (.getYear now)}))

;; X·ª≠ l√Ω g√µ t·∫Øt cho ng√†y th√°ng
;; Tham s·ªë: input - chu·ªói ng∆∞·ªùi d√πng nh·∫≠p
;; Tr·∫£ v·ªÅ: chu·ªói ng√†y th√°ng ƒë·∫ßy ƒë·ªß DD-MM-YYYY
(defn expand-date-shortcut [input]
  (let [trimmed (str/trim input)
        {:keys [month year]} (current-month-year)]
    (cond
      ;; G√µ 2 ch·ªØ s·ªë: dd (l·∫•y th√°ng v√† nƒÉm hi·ªán t·∫°i)
      (re-matches #"^\d{2}$" trimmed)
      (let [dd (Integer/parseInt trimmed)]
        (format "%02d-%02d-%d" dd month year))
      
      ;; G√µ 4 ch·ªØ s·ªë: ddmm (l·∫•y nƒÉm hi·ªán t·∫°i)
      (re-matches #"^\d{4}$" trimmed)
      (let [dd (Integer/parseInt (subs trimmed 0 2))
            mm (Integer/parseInt (subs trimmed 2 4))]
        (format "%02d-%02d-%d" dd mm year))
      
      ;; G√µ ƒë·∫ßy ƒë·ªß DD-MM-YYYY ho·∫∑c DD/MM/YYYY
      (re-matches #"^\d{2}[-/]\d{2}[-/]\d{4}$" trimmed)
      (str/replace trimmed #"[/]" "-")
      
      ;; C√°c tr∆∞·ªùng h·ª£p kh√°c, gi·ªØ nguy√™n
      :else trimmed)))

;; Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ng√†y th√°ng
;; Tham s·ªë: date-str - chu·ªói ng√†y th√°ng theo ƒë·ªãnh d·∫°ng DD-MM-YYYY
;; Tr·∫£ v·ªÅ: true n·∫øu ng√†y th√°ng h·ª£p l·ªá, false n·∫øu kh√¥ng
(defn valid-date? [date-str]
  (if-let [[_ dd mm yyyy] (re-matches #"^(\d{2})-(\d{2})-(\d{4})$" date-str)]
    (let [d (Integer/parseInt dd)
          m (Integer/parseInt mm)
          y (Integer/parseInt yyyy)
          max-day (cond
                     (or (< m 1) (> m 12)) 0
                     (= m 2) (if (or (zero? (mod y 400)) (and (zero? (mod y 4)) (not (zero? (mod y 100))))) 29 28)
                     (#{4 6 9 11} m) 30
                     :else 31)]
      (and (<= 1 d max-day)))
    false))

;; Helper √©p ki·ªÉu v·ªÅ map n·∫øu kh√¥ng ph·∫£i map
(defn force-map [v]
  (cond
    (map? v) v
    (string? v) {:_value v}
    (number? v) {:_value v}
    (nil? v) {}
    :else {}))

;; -------------------------------
;; GUM UI
;; -------------------------------

;; X√≥a d√≤ng hi·ªán t·∫°i v√† d√≤ng tr∆∞·ªõc ƒë√≥
(defn clear-error-lines []
  (print "\033[2K")  ;; X√≥a d√≤ng hi·ªán t·∫°i
  (print "\033[1A")  ;; Di chuy·ªÉn l√™n 1 d√≤ng
  (print "\033[2K")  ;; X√≥a d√≤ng ƒë√≥
  (flush))

;; Hi·ªÉn th·ªã th√¥ng b√°o l·ªói v·ªõi GUM
(defn show-error [message]
  (shell {:out :string} "gum" "style" "--foreground" "#ff0000" "--border" "normal" "--border-foreground" "#ff0000" "--margin" "1" "--padding" "1" message))

;; Hi·ªÉn th·ªã input text v·ªõi GUM
;; Tham s·ªë: label - nh√£n hi·ªÉn th·ªã cho input
;; Tr·∫£ v·ªÅ: chu·ªói ng∆∞·ªùi d√πng nh·∫≠p v√†o
(defn gum-input [label]
  (-> (shell {:out :string} "gum" "input" "--placeholder" label)
      :out str/trim))

;; Hi·ªÉn th·ªã dropdown select v·ªõi GUM
;; Tham s·ªë: label - nh√£n hi·ªÉn th·ªã, options - danh s√°ch c√°c l·ª±a ch·ªçn
;; Tr·∫£ v·ªÅ: l·ª±a ch·ªçn ƒë∆∞·ª£c ch·ªçn (m·ªôt chu·ªói)
(defn gum-select [label options]
  (-> (apply shell {:out :string}
             (concat ["gum" "choose" "--header" label] options))
      :out str/trim))

;; Hi·ªÉn th·ªã multiselect v·ªõi GUM
;; Tham s·ªë: label - nh√£n hi·ªÉn th·ªã, options - danh s√°ch c√°c l·ª±a ch·ªçn
;; Tr·∫£ v·ªÅ: danh s√°ch c√°c l·ª±a ch·ªçn ƒë∆∞·ª£c ch·ªçn (vector)
(defn gum-multiselect [label options]
  (-> (apply shell {:out :string}
             (concat ["gum" "choose" "--no-limit" "--header" label] options))
      :out str/split-lines))

;; -------------------------------
;; Field handling
;; -------------------------------

;; Multimethod ƒë·ªÉ x·ª≠ l√Ω c√°c lo·∫°i field kh√°c nhau
;; Tham s·ªë: field - th√¥ng tin field, path - ƒë∆∞·ªùng d·∫´n trong c·∫•u tr√∫c d·ªØ li·ªáu
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - c·∫≠p nh·∫≠t atom answers)
(defmulti ask-field (fn [field & _] (keyword (:type field))))

;; X·ª≠ l√Ω branching logic - hi·ªÉn th·ªã field con d·ª±a tr√™n l·ª±a ch·ªçn
;; Tham s·ªë: branch - map ch·ª©a c√°c nh√°nh, value - gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn, path - ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - g·ªçi ask-field cho c√°c field con)
(defn handle-branch [branch value path form]
  (let [raw-key (str/trim (str value))
        norm-key (normalize-branch-key value)
        norm-branch (into {} (map (fn [[k v]] [(normalize-branch-key k) v]) branch))]
    (when-let [subfields (get norm-branch norm-key)]
      (doseq [sub subfields]
        (let [field-id (last path)
              branch-key (keyword (str (name field-id) "_branch"))
              branch-path (conj (pop path) branch-key (keyword raw-key))]
          (ask-field sub branch-path form))))))

;; S·ª≠a c√°c h√†m validation ƒë·ªÉ ch·ªâ c·∫≠p nh·∫≠t status-line
(defmethod ask-field :text [{:keys [id label required branch regex regexError]} path form]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (loop []
                  (let [v (gum-input label)]
                    (if (and regex (not (re-matches (re-pattern regex) v)))
                      (do (set-status! (or regexError (str "Gi√° tr·ªã kh√¥ng kh·ªõp v·ªõi regex: " regex))) (clear-screen) (render-header form) (recur))
                      (do (clear-status!) (clear-screen) (render-header form) v)))))]
    (when (or (not required) (not (str/blank? (str value))))
      (swap! answers update-in path #(assoc (force-map %) id-k (parse-value value "text"))))
    (handle-branch branch value (conj path id-k) form)))

(defmethod ask-field :number [{:keys [id label required branch]} path form]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (loop []
                  (let [v (gum-input label)]
                    (if (or (not required)
                            (try (Integer/parseInt v) true (catch Exception _ false)))
                      (do (clear-status!) (clear-screen) (render-header form) v)
                      (do (set-status! "‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n!") (clear-screen) (render-header form) (recur))))))]
    (when (or (not required) (not (str/blank? (str value))))
      (swap! answers update-in path #(assoc (force-map %) id-k (parse-value value "number"))))
    (handle-branch branch value (conj path id-k) form)))

(defmethod ask-field :date [{:keys [id label required branch]} path form]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (loop []
                  (let [v (gum-input (str label " (DD-MM-YYYY ho·∫∑c g√µ t·∫Øt: 04, 1204)"))]
                    (cond
                      (str/blank? v) (do (clear-status!) (clear-screen) (render-header form) (today))
                      :else
                      (let [expanded (expand-date-shortcut v)]
                        (if (not (valid-date? expanded))
                          (do (set-status! "‚ö†Ô∏è Ng√†y th√°ng kh√¥ng h·ª£p l·ªá. V√≠ d·ª•: 31-12-2023") (clear-screen) (render-header form) (recur))
                          (do (clear-status!) (clear-screen) (render-header form) expanded)))))))]
    (when (or (not required) (not (str/blank? (str value))))
      (swap! answers update-in path #(assoc (force-map %) id-k (parse-value value "date"))))
    (handle-branch branch value (conj path id-k) form)))

(defmethod ask-field :select [{:keys [id label options branch]} path form]
  (let [id-k (keyword id)
        value (if (should-skip? id path)
                (get-prefilled id path)
                (gum-select label options))]
    (swap! answers update-in path #(assoc (force-map %) id-k value))
    (handle-branch branch value (conj path id-k) form)))

(defmethod ask-field :multiselect [{:keys [id label options branch]} path form]
  (let [id-k (keyword id)
        raw (if (should-skip? id path)
              (get-prefilled id path)
              (gum-multiselect label options))
        choices (cond
                  (string? raw) [raw]
                  (sequential? raw) raw
                  :else [])]
    (swap! answers update-in path #(assoc (force-map %) id-k choices))
    (doseq [choice choices]
      (handle-branch branch choice (conj path id-k) form))))

;; -------------------------------
;; Entry point
;; -------------------------------

;; H√†m ch√≠nh ƒë·ªÉ ch·∫°y form
;; Tham s·ªë: form - c·∫•u tr√∫c form ch·ª©a title, description v√† fields
;; Tr·∫£ v·ªÅ: kh√¥ng c√≥ (side effect - hi·ªÉn th·ªã form)
(defn run-form [form]
  (render-header form)
  (doseq [field (:fields form)]
    (ask-field field [:selectedByUser] form))
  ;; Vi·ªác l∆∞u file ƒë∆∞·ª£c x·ª≠ l√Ω trong run-form.clj
  )


